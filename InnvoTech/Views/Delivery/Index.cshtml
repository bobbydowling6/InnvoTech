@using Microsoft.AspNetCore.Mvc.ModelBinding;
@using InnvoTech.Models;
@model InnvoTech.Models.DeliveryViewModel
@{
    ViewData["Title"] = "Index";
    var states = (new string[] { "", "Alabama", "Alaska", "Arkansas", "Arkansas", "California", "Colorado", "Connecticut", "Delaware",
"Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland",
"Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey",
"New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming" }).Select(x => new SelectListItem { Text = x, Value = x });
    var years = (new string[] {
        "",
        DateTime.Now.Year.ToString(),
        DateTime.Now.AddYears(1).Year.ToString(),
        DateTime.Now.AddYears(2).Year.ToString(),
        DateTime.Now.AddYears(3).Year.ToString(),
        DateTime.Now.AddYears(4).Year.ToString(),
        DateTime.Now.AddYears(5).Year.ToString(),
    }).Select(x => new SelectListItem { Text = x, Value = x });
}
@if (Model.CartProducts != null)
{
    <div class="row">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
            </thead>
            @foreach (var item in Model.CartProducts)
            {
                <tr>
                    <td>@item.Products.Name</td>
                    <td>
                        <form asp-action="update" asp-controller="delivery" method="post" class="form-inline">
                            <input name="productId" value="@item.Products.Id" type="hidden" />                            
                            <input name="quantity" value="@item.Quantity" type="number" class="form-control-sm" /><input type="submit" value="Update Quantity" class="btn btn-info" />
                            </form>
                    </td>
                    <td>@((item.Products.Price ?? 0m).ToString("c"))</td>
                </tr>
            }
            <tfoot>
                <tr>
                    <th colspan="2">Subtotal</th>
                    <th>@Model.CartProducts.Sum(x => (x.Products.Price ?? 0m) * x.Quantity).ToString("c")</th>
                </tr>
            </tfoot>
        </table>
    </div>
}

@if (!this.ViewContext.ModelState.IsValid)
{
    <div asp-validation-summary="All" class="alert alert-danger"></div>
}
    <form method="post" asp-action="Index" asp-controller="Delivery" novalidate>
        <div class="form-group">
            <label asp-for="ShippingAddress"></label>
            <input asp-for="ShippingAddress" class="@(ViewData.ModelState.ContainsKey("ShippingAddress") && ViewData.ModelState.First(x => x.Key == "ShippingAddress").Value.ValidationState == ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" placeholder="Shipping Address" />
            <span asp-validation-for="ShippingAddress" class="invalid-feedback"></span>
        </div>
        <div class="form-group">
            <label for="inputAddress2">Secondary Address</label>
            <input type="text" class="form-control" id="inputAddress2" placeholder="Apartment, studio, or floor">
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label asp-for="ShippingCity"></label>
                <input asp-for="ShippingCity" placeholder="city" class="@(ViewData.ModelState.ContainsKey("ShippingCity") && ViewData.ModelState.First(x => x.Key == "ShippingCity").Value.ValidationState == ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" />
                <span asp-validation-for="ShippingCity" class="invalid-feedback"></span>
            </div>
            <div class="form-group col-md-4">
                <label asp-for="ShippingState"></label>
                <select asp-for="ShippingState" asp-items="states" class="@(ViewData.ModelState.ContainsKey("ShippingState") && ViewData.ModelState.First(x => x.Key == "ShippingState").Value.ValidationState == ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")"></select>
                <span asp-validation-for="ShippingState" class="invalid-feedback"></span>

            </div>
            <div class="form-group col-md-2">
                <label asp-for="ShippingZip"></label>
                <input asp-for="ShippingZip" placeholder="zip code" class="@(ViewData.ModelState.ContainsKey("ShippingZip") && ViewData.ModelState.First(x => x.Key == "ShippingZip").Value.ValidationState == ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" />
                <span asp-validation-for="ShippingZip" class="invalid-feedback"></span>

            </div>
        </div>
        <div class="form-group">
            <label asp-for="BillingAddress"></label>
            <input asp-for="BillingAddress" class="@(ViewData.ModelState.ContainsKey("BillingAddress") && ViewData.ModelState.FirstOrDefault(x => x.Key == "BillingAddress").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" placeholder="address" required />
            <span class="invalid-feedback">Address is required</span>
        </div>
        <div class="form-group">
            <label asp-for="BillingCity"></label>
            <input asp-for="BillingCity" placeholder="city" class="@(ViewData.ModelState.ContainsKey("BillingCity") && ViewData.ModelState.FirstOrDefault(x => x.Key == "BillingCity").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" required />
            <span class="invalid-feedback">City is required</span>
        </div>
        <div class="form-group">
            <label asp-for="BillingState"></label>
            <select asp-for="BillingState" asp-items="states" required class="@(ViewData.ModelState.ContainsKey("BillingState") && ViewData.ModelState.FirstOrDefault(x => x.Key == "BillingState").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")"></select>
            <span asp-validation-for="BillingState" class="invalid-feedback"></span>
        </div>
        <div class="form-group">
            <label asp-for="BillingZip"></label>
            <input asp-for="BillingZip" placeholder="zip code" required pattern="^\d{5}(?:[-\s]\d{4})?$" class="@(ViewData.ModelState.ContainsKey("BillingZip") && ViewData.ModelState.FirstOrDefault(x => x.Key == "BillingZip").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" />
            <span asp-validation-for="BillingZip" class="invalid-feedback"></span>
        </div>
        <div class="form-group">
            <label asp-for="Date"></label>
            <input asp-for="Date" class="@(ViewData.ModelState.ContainsKey(" Date") && ViewData.ModelState.First(x=> x.Key == "Date").Value.ValidationState == ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" placeholder="Date" />
            <span asp-validation-for="Date" class="invalid-feedback"></span>
        </div>

        <div class="form-group">
            <label asp-for="creditcardnumber"></label>
            <input asp-for="creditcardnumber" placeholder="4111111111111111" class="@(ViewData.ModelState.ContainsKey("creditcardnumber") && ViewData.ModelState.FirstOrDefault(x => x.Key == "creditcardnumber").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" required />
        </div>
        <div class="form-group">
            <label asp-for="creditcardname"></label>
            <input asp-for="creditcardname" placeholder="John Cardholder" class="@(ViewData.ModelState.ContainsKey("creditcardname") && ViewData.ModelState.FirstOrDefault(x => x.Key == "creditcardname").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" required />
        </div>
        <div class="form-group">
            <label asp-for="creditcardverificationvalue"></label>
            <input asp-for="creditcardverificationvalue" placeholder="123" class="@(ViewData.ModelState.ContainsKey("creditcardverificationvalue") && ViewData.ModelState.FirstOrDefault(x => x.Key == "creditcardverificationvalue").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" required />
        </div>
        <div class="form-group">
            <label for="expirationmonth">Expiration Month</label>
            <div class="form-row">


                <div class="col">
                    <select asp-for="expirationmonth" class="@(ViewData.ModelState.ContainsKey("expirationmonth") && ViewData.ModelState.FirstOrDefault(x => x.Key == "expirationmonth").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" required>
                        <option value="01">01</option>
                        <option value="02">02</option>
                        <option value="03">03</option>
                        <option value="04">04</option>
                        <option value="05">05</option>
                        <option value="06">06</option>
                        <option value="07">07</option>
                        <option value="08">08</option>
                        <option value="09">09</option>
                        <option value="10">10</option>
                        <option value="11">11</option>
                        <option value="12">12</option>
                    </select>
                </div>
                <div class="col">
                    <select asp-for="expirationyear" asp-items="years" class="@(ViewData.ModelState.ContainsKey("expirationyear") && ViewData.ModelState.FirstOrDefault(x => x.Key == "expirationyear").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" required></select>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-success">Submit</button>
    </form>

